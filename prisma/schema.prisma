generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing", "metrics"]
  binaryTargets   = ["native", "darwin-arm64"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  relationMode      = "prisma"
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// Database connection settings

// Optimize for connection pooling

model AdditionalService {
  id          String   @id
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  currency    String   @default("VND")
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  bookingId   String?
  Booking     Booking? @relation(fields: [bookingId], references: [id])
}

model AuditLog {
  id         String   @id
  operation  String
  entityType String
  entityId   String?
  oldValues  Json?
  newValues  Json?
  userId     String?
  createdAt  DateTime @default(now())

  @@index([createdAt])
  @@index([entityId])
  @@index([entityType])
  @@index([operation])
}

model Banner {
  id             String         @id
  title          String
  subtitle       String?
  description    String?
  imageUrl       String
  linkUrl        String?
  buttonText     String?
  position       BannerPosition @default(HOMEPAGE)
  type           BannerType     @default(HERO)
  isActive       Boolean        @default(true)
  startDate      DateTime?
  endDate        DateTime?
  sortOrder      Int            @default(0)
  lang           String         @default("vi")
  seoTitle       String?
  seoDescription String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime

  @@index([isActive])
  @@index([lang])
  @@index([position])
  @@index([sortOrder])
  @@index([type])
}

model Blog {
  id                                String        @id
  title                             String
  slug                              String        @unique
  content                           String
  excerpt                           String?
  lang                              String        @default("vi")
  status                            BlogStatus    @default(DRAFT)
  authorId                          String
  categoryId                        String?
  tags                              String[]
  seoTitle                          String?
  seoDescription                    String?
  featuredImageId                   String?
  imageUrl                          String?
  publishedAt                       DateTime?
  createdAt                         DateTime      @default(now())
  updatedAt                         DateTime
  audioFileFemaleId                 String?
  audioFileMaleId                   String?
  File_Blog_audioFileFemaleIdToFile File?         @relation("Blog_audioFileFemaleIdToFile", fields: [audioFileFemaleId], references: [id])
  File_Blog_audioFileMaleIdToFile   File?         @relation("Blog_audioFileMaleIdToFile", fields: [audioFileMaleId], references: [id])
  User                              User          @relation(fields: [authorId], references: [id])
  BlogCategory                      BlogCategory? @relation(fields: [categoryId], references: [id])

  @@index([authorId])
  @@index([lang])
  @@index([slug])
  @@index([status])
}

model BlogCategory {
  id          String   @id
  name        String
  slug        String   @unique
  description String?
  lang        String   @default("vi")
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  Blog        Blog[]

  @@index([lang])
  @@index([slug])
}

model Booking {
  id                String              @id
  userId            String
  status            BookingStatus       @default(PENDING)
  paymentStatus     PaymentStatus       @default(UNPAID)
  totalPrice        Decimal             @db.Decimal(12, 2)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  bookingCode       String              @unique
  notes             String?
  version           Int                 @default(1)
  startDate         DateTime?
  endDate           DateTime?
  metadata          Json?
  vehicleId         String?
  AdditionalService AdditionalService[]
  User              User                @relation(fields: [userId], references: [id])
  BookingServices   BookingServices[]
  Invoice           Invoice?
  Payment           Payment[]

  @@index([endDate])
  @@index([paymentStatus])
  @@index([startDate])
  @@index([status])
  @@index([userId])
  @@index([vehicleId])
}

model BookingServices {
  bookingId String
  serviceId String
  Booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  Service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@id([bookingId, serviceId])
}

model BusServiceDetail {
  id                  String   @id
  serviceId           String   @unique
  busCompany          String
  busType             String
  route               String
  departureStation    String
  arrivalStation      String
  departureCity       String
  arrivalCity         String
  departureTime       String
  arrivalTime         String
  duration            String
  distance            Float
  basePrice           Decimal  @db.Decimal(12, 2)
  totalSeats          Int
  seatType            String
  features            String[]
  pickupPoints        String[]
  dropoffPoints       String[]
  operatingDays       String[]
  amenities           String[]
  driverName          String?
  driverPhone         String?
  vehicleLicensePlate String?
  vehicleModel        String?
  description         String?
  Service             Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model ComboServiceDetail {
  id              String    @id
  serviceId       String    @unique
  comboPrice      Decimal   @db.Decimal(12, 2)
  discountPercent Decimal?  @db.Decimal(5, 2)
  validityFrom    DateTime?
  validityTo      DateTime?
  description     String?
  Service         Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model CompanyInfo {
  id                                       String   @id
  key                                      String   @unique
  title                                    String
  content                                  String
  lang                                     String   @default("vi")
  isActive                                 Boolean  @default(true)
  createdAt                                DateTime @default(now())
  updatedAt                                DateTime
  audioFileFemaleId                        String?
  audioFileMaleId                          String?
  File_CompanyInfo_audioFileFemaleIdToFile File?    @relation("CompanyInfo_audioFileFemaleIdToFile", fields: [audioFileFemaleId], references: [id])
  File_CompanyInfo_audioFileMaleIdToFile   File?    @relation("CompanyInfo_audioFileMaleIdToFile", fields: [audioFileMaleId], references: [id])

  @@index([key])
  @@index([lang])
}

model Contact {
  id        String        @id
  name      String
  email     String
  phone     String?
  subject   String
  message   String
  status    ContactStatus @default(NEW)
  notes     String?
  handledBy String?
  createdAt DateTime      @default(now())
  updatedAt DateTime
  User      User?         @relation(fields: [handledBy], references: [id])

  @@index([email])
  @@index([status])
}

model DriverRating {
  id             String   @id
  driverId       String   @unique
  averageRating  Decimal  @db.Decimal(3, 2)
  totalReviews   Int
  oneStarCount   Int
  twoStarCount   Int
  threeStarCount Int
  fourStarCount  Int
  fiveStarCount  Int
  updatedAt      DateTime
  User           User     @relation(fields: [driverId], references: [id])
}

model DriverReview {
  id                               String   @id
  driverId                         String
  userId                           String
  bookingId                        String?
  rating                           Int
  comment                          String?
  status                           String   @default("PENDING")
  createdAt                        DateTime @default(now())
  updatedAt                        DateTime
  User_DriverReview_driverIdToUser User     @relation("DriverReview_driverIdToUser", fields: [driverId], references: [id])
  User_DriverReview_userIdToUser   User     @relation("DriverReview_userIdToUser", fields: [userId], references: [id])

  @@index([driverId])
  @@index([rating])
  @@index([status])
  @@index([userId])
}

model FAQ {
  id                               String   @id
  question                         String
  answer                           String
  lang                             String   @default("vi")
  category                         String?
  isActive                         Boolean  @default(true)
  sortOrder                        Int      @default(0)
  createdAt                        DateTime @default(now())
  updatedAt                        DateTime
  audioFileFemaleId                String?
  audioFileMaleId                  String?
  File_FAQ_audioFileFemaleIdToFile File?    @relation("FAQ_audioFileFemaleIdToFile", fields: [audioFileFemaleId], references: [id])
  File_FAQ_audioFileMaleIdToFile   File?    @relation("FAQ_audioFileMaleIdToFile", fields: [audioFileMaleId], references: [id])

  @@index([category])
  @@index([isActive])
  @@index([lang])
}

model FastTrackServiceDetail {
  id           String  @id
  serviceId    String  @unique
  airportCode  String
  serviceLevel String
  basePrice    Decimal @db.Decimal(10, 2)
  description  String?
  Service      Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model File {
  id                                              String        @id
  uploaderId                                      String
  bucket                                          String
  url                                             String        @unique
  createdAt                                       DateTime      @default(now())
  category                                        FileCategory  @default(IMAGE)
  durationSec                                     Int?
  fileName                                        String
  metadata                                        Json?
  mimeType                                        String
  objectKey                                       String        @unique
  sizeBytes                                       Int
  Blog_Blog_audioFileFemaleIdToFile               Blog[]        @relation("Blog_audioFileFemaleIdToFile")
  Blog_Blog_audioFileMaleIdToFile                 Blog[]        @relation("Blog_audioFileMaleIdToFile")
  CompanyInfo_CompanyInfo_audioFileFemaleIdToFile CompanyInfo[] @relation("CompanyInfo_audioFileFemaleIdToFile")
  CompanyInfo_CompanyInfo_audioFileMaleIdToFile   CompanyInfo[] @relation("CompanyInfo_audioFileMaleIdToFile")
  FAQ_FAQ_audioFileFemaleIdToFile                 FAQ[]         @relation("FAQ_audioFileFemaleIdToFile")
  FAQ_FAQ_audioFileMaleIdToFile                   FAQ[]         @relation("FAQ_audioFileMaleIdToFile")
  User                                            User          @relation(fields: [uploaderId], references: [id])
  Service_Service_audioFileFemaleIdToFile         Service[]     @relation("Service_audioFileFemaleIdToFile")
  Service_Service_audioFileMaleIdToFile           Service[]     @relation("Service_audioFileMaleIdToFile")

  @@index([category])
  @@index([objectKey])
  @@index([uploaderId])
}

model FlightServiceDetail {
  id                String   @id
  serviceId         String   @unique
  airline           String
  flightNumber      String
  depAirportCode    String
  arrAirportCode    String
  depTime           DateTime
  arrTime           DateTime
  durationInMinutes Int?
  fareClass         String
  baggageAllowance  String?
  basePrice         Decimal  @db.Decimal(12, 2)
  description       String?
  Service           Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model HotelServiceDetail {
  id           String   @id
  serviceId    String   @unique
  hotelName    String
  starRating   Int      @db.SmallInt
  roomType     String
  boardType    String?
  basePrice    Decimal  @db.Decimal(12, 2)
  taxPercent   Decimal? @db.Decimal(5, 2)
  amenities    String[]
  address      String?
  city         String?
  country      String?
  checkInTime  String?
  checkOutTime String?
  description  String?
  Service      Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model InsuranceServiceDetail {
  id              String  @id
  serviceId       String  @unique
  insurer         String
  planCode        String
  coverageDetails Json
  premiumAmount   Decimal @db.Decimal(10, 2)
  description     String?
  Service         Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model Invoice {
  id          String        @id
  bookingId   String        @unique
  type        String
  amount      Decimal       @db.Decimal(12, 2)
  pdfUrl      String?
  issuedAt    DateTime?
  createdAt   DateTime      @default(now())
  invoiceCode String        @unique
  paidAt      DateTime?
  updatedAt   DateTime
  status      InvoiceStatus @default(DRAFT)
  Booking     Booking       @relation(fields: [bookingId], references: [id])

  @@index([bookingId])
  @@index([status])
}

model Itinerary {
  id          String          @id
  userId      String
  origin      String
  destination String
  startDate   DateTime?       @db.Date
  endDate     DateTime?       @db.Date
  preferences Json?
  budget      Decimal?        @db.Decimal(12, 2)
  status      ItineraryStatus @default(DRAFT)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime
  User        User            @relation(fields: [userId], references: [id])
  Leg         Leg[]
  Suggestion  Suggestion[]

  @@index([status])
  @@index([userId])
}

model Leg {
  id          String    @id
  itineraryId String
  dayNumber   Int
  description String?
  distanceKm  Decimal?  @db.Decimal(10, 2)
  durationMin Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  Itinerary   Itinerary @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  POI         POI[]

  @@index([dayNumber])
  @@index([itineraryId])
}

model Location {
  id           String       @id
  name         String
  type         LocationType
  address      String?
  district     String?
  city         String?
  country      String?
  zipCode      String?
  latitude     Float?
  longitude    Float?
  description  String?
  imageUrl     String?
  isActive     Boolean      @default(true)
  isPopular    Boolean      @default(false)
  contactEmail String?
  contactPhone String?
  openingHours Json?
  closingHours Json?
  website      String?
  isDeleted    Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime

  @@index([city])
  @@index([country])
  @@index([isActive])
  @@index([name])
  @@index([type])
}

model Newsletter {
  id             String           @id
  email          String           @unique
  status         NewsletterStatus @default(ACTIVE)
  preferences    Json?
  subscribedAt   DateTime         @default(now())
  unsubscribedAt DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime

  @@index([email])
  @@index([status])
}

model Notification {
  id        String               @id
  userId    String
  title     String
  message   String
  type      NotificationType     @default(INFO)
  priority  NotificationPriority @default(NORMAL)
  metadata  Json?
  isRead    Boolean              @default(false)
  createdAt DateTime             @default(now())
  updatedAt DateTime
  User      User                 @relation(fields: [userId], references: [id])

  @@index([createdAt])
  @@index([priority])
  @@index([type])
  @@index([userId])
}

model POI {
  id           String   @id
  legId        String
  name         String
  address      String?
  latitude     Decimal? @db.Decimal(10, 7)
  longitude    Decimal? @db.Decimal(10, 7)
  description  String?
  type         String?
  openingHours Json?
  contactInfo  Json?
  website      String?
  photoUrl     String?
  timeSpentMin Int?
  order        Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  Leg          Leg      @relation(fields: [legId], references: [id], onDelete: Cascade)

  @@index([legId])
  @@index([type])
}

model Payment {
  id            String    @id
  bookingId     String
  provider      String
  txnRef        String    @unique
  amount        Decimal   @db.Decimal(12, 2)
  currency      String    @default("VND")
  status        String
  paidAt        DateTime?
  createdAt     DateTime  @default(now())
  metadata      Json?
  paymentMethod String?
  updatedAt     DateTime
  Booking       Booking   @relation(fields: [bookingId], references: [id])

  @@index([bookingId])
  @@index([provider])
  @@index([status])
}

model Permission {
  id          String  @id
  name        String  @unique
  description String?
  Role        Role[]  @relation("RolePermissions")
}

model RentalConfig {
  id        String   @id
  key       String   @unique
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model RentalPriceLog {
  id          String   @id
  vehicleId   String
  rentalPrice Decimal  @db.Decimal(10, 2)
  timestamp   DateTime @default(now())

  @@index([vehicleId])
}

model Role {
  id          String       @id
  name        String       @unique
  description String?
  User        User[]
  Permission  Permission[] @relation("RolePermissions")
}

model Route {
  id                 String               @id
  fromLocation       String
  toLocation         String
  distanceKm         Decimal              @db.Decimal(10, 2)
  estimatedTimeMin   Int
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  VehicleRentalPrice VehicleRentalPrice[]

  @@index([fromLocation])
  @@index([toLocation])
}

model SEOConfig {
  id                 String   @id
  page               String   @unique
  title              String
  description        String
  keywords           String[]
  ogTitle            String?
  ogDescription      String?
  ogImage            String?
  twitterCard        String?  @default("summary_large_image")
  twitterTitle       String?
  twitterDescription String?
  twitterImage       String?
  canonicalUrl       String?
  lang               String   @default("vi")
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime

  @@index([isActive])
  @@index([lang])
  @@index([page])
}

model SeatBooking {
  id                String          @id
  scheduleId        String
  vehicleSeatId     String
  bookingId         String
  passengerName     String
  passengerPhone    String?
  passengerIdNumber String?
  passengerAge      Int?
  passengerGender   String?
  status            String          @default("RESERVED")
  departureDate     DateTime
  departureTime     String
  reservedUntil     DateTime?
  specialRequests   String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime
  VehicleSchedule   VehicleSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  VehicleSeat       VehicleSeat     @relation(fields: [vehicleSeatId], references: [id])

  @@index([bookingId])
  @@index([departureDate])
  @@index([reservedUntil])
  @@index([scheduleId])
  @@index([status])
  @@index([vehicleSeatId])
}

model Service {
  id                                   String                  @id
  type                                 ServiceType
  name                                 String
  metadata                             Json?
  isDeleted                            Boolean                 @default(false)
  createdAt                            DateTime                @default(now())
  updatedAt                            DateTime
  description                          String?
  isActive                             Boolean                 @default(true)
  imageUrl                             String?
  audioFileFemaleId                    String?
  audioFileMaleId                      String?
  BookingServices                      BookingServices[]
  BusServiceDetail                     BusServiceDetail?
  ComboServiceDetail                   ComboServiceDetail?
  FastTrackServiceDetail               FastTrackServiceDetail?
  FlightServiceDetail                  FlightServiceDetail?
  HotelServiceDetail                   HotelServiceDetail?
  InsuranceServiceDetail               InsuranceServiceDetail?
  File_Service_audioFileFemaleIdToFile File?                   @relation("Service_audioFileFemaleIdToFile", fields: [audioFileFemaleId], references: [id])
  File_Service_audioFileMaleIdToFile   File?                   @relation("Service_audioFileMaleIdToFile", fields: [audioFileMaleId], references: [id])
  ServiceRating                        ServiceRating?
  ServiceReview                        ServiceReview[]
  TourServiceDetail                    TourServiceDetail?
  TransferServiceDetail                TransferServiceDetail?
  VehicleServiceDetail                 VehicleServiceDetail?
  VisaServiceDetail                    VisaServiceDetail?

  @@index([name])
  @@index([type])
}

model ServiceRating {
  id             String   @id
  serviceId      String   @unique
  averageRating  Decimal  @db.Decimal(3, 2)
  totalReviews   Int
  oneStarCount   Int
  twoStarCount   Int
  threeStarCount Int
  fourStarCount  Int
  fiveStarCount  Int
  updatedAt      DateTime
  Service        Service  @relation(fields: [serviceId], references: [id])
}

model ServiceReview {
  id        String   @id
  serviceId String
  userId    String
  bookingId String?
  rating    Int
  comment   String?
  status    String   @default("APPROVED")
  createdAt DateTime @default(now())
  updatedAt DateTime
  Service   Service  @relation(fields: [serviceId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@index([rating])
  @@index([serviceId])
  @@index([status])
  @@index([userId])
}

model Suggestion {
  id          String      @id
  itineraryId String
  serviceType ServiceType
  serviceId   String?
  description String?
  details     Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime
  Itinerary   Itinerary   @relation(fields: [itineraryId], references: [id], onDelete: Cascade)

  @@index([itineraryId])
  @@index([serviceType])
}

model TourServiceDetail {
  id             String     @id
  serviceId      String     @unique
  tourCode       String     @unique
  itinerary      Json?
  departureDates DateTime[]
  adultPrice     Decimal    @db.Decimal(12, 2)
  childPrice     Decimal?   @db.Decimal(12, 2)
  seatsAvailable Int
  minPax         Int?
  maxPax         Int?
  durationInDays Int?
  description    String?
  Service        Service    @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model TransferServiceDetail {
  id            String  @id
  serviceId     String  @unique
  vehicleType   String
  fromLocation  String
  toLocation    String
  basePrice     Decimal @db.Decimal(10, 2)
  maxPassengers Int?
  description   String?
  Service       Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model User {
  id                                       String                @id
  email                                    String                @unique
  password                                 String
  fullName                                 String
  roleId                                   String                @default("default_user_role_id")
  customerType                             String?
  taxCode                                  String?
  companyName                              String?
  createdAt                                DateTime              @default(now())
  updatedAt                                DateTime
  avatarUrl                                String?
  isActive                                 Boolean               @default(true)
  phone                                    String?               @unique
  language                                 String                @default("vi")
  bio                                      String?
  driverStatus                             DriverApprovalStatus?
  experience                               Int?
  languages                                String[]
  licenseClass                             String?
  licenseExpiry                            DateTime?
  licenseNumber                            String?
  rating                                   Decimal?              @db.Decimal(3, 2)
  supabaseId                               String?               @unique
  Blog                                     Blog[]
  Booking                                  Booking[]
  Contact                                  Contact[]
  DriverRating                             DriverRating?
  DriverReview_DriverReview_driverIdToUser DriverReview[]        @relation("DriverReview_driverIdToUser")
  DriverReview_DriverReview_userIdToUser   DriverReview[]        @relation("DriverReview_userIdToUser")
  File                                     File[]
  Itinerary                                Itinerary[]
  Notification                             Notification[]
  ServiceReview                            ServiceReview[]
  Role                                     Role                  @relation(fields: [roleId], references: [id])
}

model VehicleLayout {
  id                String        @id
  vehicleId         String
  layoutName        String
  vehicleType       String
  totalSeats        Int
  hasMultipleFloors Boolean       @default(false)
  totalFloors       Int           @default(1)
  description       String?
  isActive          Boolean       @default(true)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime
  VehicleSeat       VehicleSeat[]

  @@index([isActive])
  @@index([vehicleId])
}

model VehiclePricePerKm {
  id            String      @id
  vehicleTypeId String
  pricePerKm    Decimal     @db.Decimal(10, 2)
  minKm         Int?
  maxKm         Int?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime
  isActive      Boolean     @default(true)
  VehicleType   VehicleType @relation(fields: [vehicleTypeId], references: [id])

  @@index([isActive])
  @@index([vehicleTypeId])
}

model VehicleRentalPrice {
  id            String      @id
  vehicleTypeId String
  routeId       String?
  pricePerDay   Decimal     @db.Decimal(10, 2)
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime
  metadata      Json?
  Route         Route?      @relation(fields: [routeId], references: [id])
  VehicleType   VehicleType @relation(fields: [vehicleTypeId], references: [id])

  @@index([isActive])
  @@index([routeId])
  @@index([vehicleTypeId])
}

model VehicleRoute {
  id                String            @id
  routeName         String
  departureCity     String
  arrivalCity       String
  departureStation  String
  arrivalStation    String
  distance          Decimal           @db.Decimal(8, 2)
  estimatedDuration String
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime
  VehicleSchedule   VehicleSchedule[]

  @@index([departureCity, arrivalCity])
  @@index([isActive])
}

model VehicleSchedule {
  id             String        @id
  vehicleId      String
  routeId        String
  departureDate  DateTime
  departureTime  String
  arrivalTime    String
  driverName     String
  driverPhone    String?
  status         String        @default("SCHEDULED")
  basePrice      Decimal       @db.Decimal(10, 2)
  totalSeats     Int
  availableSeats Int
  bookedSeats    Int           @default(0)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  SeatBooking    SeatBooking[]
  VehicleRoute   VehicleRoute  @relation(fields: [routeId], references: [id])

  @@index([departureDate])
  @@index([routeId])
  @@index([status])
  @@index([vehicleId])
}

model VehicleSeat {
  id              String        @id
  vehicleLayoutId String
  seatNumber      String
  row             Int
  column          String
  floor           Int?
  seatType        String        @default("STANDARD")
  position        String        @default("MIDDLE")
  status          String        @default("ACTIVE")
  price           Decimal       @default(100000) @db.Decimal(10, 2)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime
  SeatBooking     SeatBooking[]
  VehicleLayout   VehicleLayout @relation(fields: [vehicleLayoutId], references: [id], onDelete: Cascade)

  @@unique([vehicleLayoutId, seatNumber, floor])
  @@index([floor, row, column])
  @@index([seatNumber])
  @@index([vehicleLayoutId])
}

model VehicleServiceDetail {
  id               String  @id
  serviceId        String  @unique
  vehicleType      String
  brand            String?
  model            String
  licensePlate     String? @unique
  seats            Int
  fuelType         String?
  pricePerDay      Decimal @db.Decimal(10, 2)
  extras           Json?
  pickupLocation   String?
  pickupLatitude   Float?
  pickupLongitude  Float?
  dropoffLocation  String?
  dropoffLatitude  Float?
  dropoffLongitude Float?
  description      String?
  Service          Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model VehicleType {
  id                 String               @id
  name               String
  description        String?
  capacity           Int
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  VehiclePricePerKm  VehiclePricePerKm[]
  VehicleRentalPrice VehicleRentalPrice[]
}

model VisaServiceDetail {
  id            String  @id
  serviceId     String  @unique
  visaType      String
  targetCountry String
  serviceLevel  String?
  processingFee Decimal @db.Decimal(10, 2)
  serviceCharge Decimal @db.Decimal(10, 2)
  description   String?
  Service       Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

enum BannerPosition {
  HOMEPAGE
  SEARCH_RESULTS
  DETAIL_PAGE
  SIDEBAR
}

enum BannerType {
  HERO
  SLIDER
  PROMO
  ANNOUNCEMENT
}

enum BlogStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum ContactStatus {
  NEW
  PROCESSING
  RESOLVED
  CLOSED
  IN_PROGRESS
  ON_HOLD
}

enum DriverApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum FileCategory {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  OTHER
}

enum InvoiceStatus {
  DRAFT
  ISSUED
  PAID
  CANCELLED
  REFUNDED
}

enum ItineraryStatus {
  DRAFT
  PUBLISHED
  COMPLETED
  CANCELLED
  CONFIRMED
}

enum LocationType {
  CITY
  PROVINCE
  DISTRICT
  WARD
  LANDMARK
  AIRPORT
  HOTEL
  RESTAURANT
  ATTRACTION
  OTHER
  COUNTRY
  REGION
  COMMUNE
  BEACH
  MOUNTAIN
  TEMPLE
  MUSEUM
  PARK
  SHOPPING_MALL
  MARKET
  BUS_STATION
  TRAIN_STATION
  FERRY_TERMINAL
  BORDER_CROSSING
  SCENIC_SPOT
  CULTURAL_SITE
}

enum NewsletterStatus {
  ACTIVE
  UNSUBSCRIBED
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  BOOKING
  PAYMENT
  SYSTEM
}

enum PaymentStatus {
  PAID
  UNPAID
  PARTIALLY_PAID
  REFUNDED
}

enum ServiceType {
  BUS
  COMBO
  FAST_TRACK
  FLIGHT
  HOTEL
  INSURANCE
  TOUR
  TRANSFER
  VEHICLE
  VISA
  VEHICLE_RENTAL
  VEHICLE_TICKET
}
