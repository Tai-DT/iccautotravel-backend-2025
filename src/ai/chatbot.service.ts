import { Injectable } from '@nestjs/common';
import { ChatMessage } from './ai.service';
import { MockI18nService } from './mock-i18n.service';

export interface ChatResponse {
  message: string;
  suggestions?: string[];
  actions?: ChatAction[];
  metadata?: any;
}

export interface ChatAction {
  type: 'book_service' | 'view_details' | 'contact_support' | 'get_quote';
  label: string;
  data?: any;
}

@Injectable()
export class ChatbotService {
  constructor(private readonly i18n: MockI18nService) {}

  private readonly knowledgeBase = {
    greetings: [
      'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI c·ªßa ICC Auto Travel. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?',
      'Ch√†o b·∫°n! T√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n v·ªÅ c√°c d·ªãch v·ª• du l·ªãch v√† v·∫≠n chuy·ªÉn.',
      "Hello! I'm your ICC Auto Travel AI assistant. How can I help you today?",
    ],
    services: {
      transfer: {
        description: 'D·ªãch v·ª• ƒë∆∞a ƒë√≥n s√¢n bay v√† di chuy·ªÉn trong th√†nh ph·ªë',
        price_range: '200,000 - 500,000 VND',
        features: ['Xe ƒë·ªùi m·ªõi', 'T√†i x·∫ø kinh nghi·ªám', 'ƒê√∫ng gi·ªù', 'An to√†n'],
      },
      tour: {
        description: 'Tour du l·ªãch tr·ªçn g√≥i v·ªõi h∆∞·ªõng d·∫´n vi√™n chuy√™n nghi·ªáp',
        price_range: '800,000 - 3,000,000 VND',
        features: ['H∆∞·ªõng d·∫´n vi√™n', 'B·ªØa ƒÉn', 'Kh√°ch s·∫°n', 'B·∫£o hi·ªÉm'],
      },
      vehicle: {
        description: 'Thu√™ xe t·ª± l√°i ho·∫∑c c√≥ t√†i x·∫ø',
        price_range: '600,000 - 1,500,000 VND/ng√†y',
        features: ['Xe m·ªõi', 'B·∫£o hi·ªÉm', 'H·ªó tr·ª£ 24/7', 'Kh√¥ng c·ªçc'],
      },
      hotel: {
        description: 'ƒê·∫∑t ph√≤ng kh√°ch s·∫°n v·ªõi gi√° t·ªët nh·∫•t',
        price_range: '500,000 - 5,000,000 VND/ƒë√™m',
        features: [
          'X√°c nh·∫≠n ngay',
          'H·ªßy mi·ªÖn ph√≠',
          'ƒê√°nh gi√° cao',
          'V·ªã tr√≠ thu·∫≠n l·ª£i',
        ],
      },
      flight: {
        description: 'V√© m√°y bay gi√° r·∫ª c√°c h√£ng h√†ng kh√¥ng',
        price_range: '1,000,000 - 10,000,000 VND',
        features: [
          'Gi√° t·ªët nh·∫•t',
          'ƒê·ªïi v√© linh ho·∫°t',
          'H·ªó tr·ª£ 24/7',
          'Check-in online',
        ],
      },
    },
    faqs: [
      {
        question: ['ƒë·∫∑t ch·ªó', 'booking', 'book', 'ƒë·∫∑t'],
        answer:
          'ƒê·ªÉ ƒë·∫∑t ch·ªó, b·∫°n c√≥ th·ªÉ: 1) G·ªçi hotline 1900-1234, 2) ƒê·∫∑t online qua website, 3) Chat v·ªõi t√¥i ngay b√¢y gi·ªù ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.',
        actions: [
          {
            type: 'book_service',
            label: 'ƒê·∫∑t ngay',
            data: { action: 'start_booking' },
          },
          {
            type: 'contact_support',
            label: 'G·ªçi hotline',
            data: { phone: '1900-1234' },
          },
        ],
      },
      {
        question: ['gi√°', 'price', 'cost', 'ph√≠', 'ti·ªÅn'],
        answer:
          'Gi√° d·ªãch v·ª• ph·ª• thu·ªôc v√†o lo·∫°i h√¨nh v√† th·ªùi gian. T√¥i c√≥ th·ªÉ b√°o gi√° c·ª• th·ªÉ n·∫øu b·∫°n cho t√¥i bi·∫øt: 1) D·ªãch v·ª• c·∫ßn d√πng, 2) Th·ªùi gian, 3) S·ªë ng∆∞·ªùi.',
        actions: [
          {
            type: 'get_quote',
            label: 'Xem b√°o gi√°',
            data: { action: 'get_quote' },
          },
        ],
      },
      {
        question: ['h·ªßy', 'cancel', 'refund', 'ho√†n ti·ªÅn'],
        answer:
          'Ch√≠nh s√°ch h·ªßy: 1) H·ªßy tr∆∞·ªõc 24h: ho√†n 100%, 2) H·ªßy tr∆∞·ªõc 12h: ho√†n 50%, 3) H·ªßy d∆∞·ªõi 12h: kh√¥ng ho√†n ti·ªÅn. M·ªôt s·ªë d·ªãch v·ª• c√≥ ch√≠nh s√°ch ri√™ng.',
        actions: [
          {
            type: 'contact_support',
            label: 'H·ªó tr·ª£ h·ªßy v√©',
            data: { action: 'cancel_booking' },
          },
        ],
      },
      {
        question: ['thanh to√°n', 'payment', 'pay'],
        answer:
          'Ch√∫ng t√¥i nh·∫≠n nhi·ªÅu h√¨nh th·ª©c thanh to√°n: 1) Th·∫ª t√≠n d·ª•ng/ghi n·ª£, 2) Chuy·ªÉn kho·∫£n, 3) V√≠ ƒëi·ªán t·ª≠ (MoMo, ZaloPay), 4) Ti·ªÅn m·∫∑t.',
      },
    ],
  };

  async processMessage(chatMessage: ChatMessage): Promise<ChatResponse> {
    const { message, language = 'vi' } = chatMessage;
    const lowerMessage = message.toLowerCase();

    // Greeting detection
    if (this.isGreeting(lowerMessage)) {
      return {
        message:
          this.i18n.translate('chatbot.greeting', { lang: language }) +
          '\n\n' +
          this.i18n.translate('chatbot.services_intro', { lang: language }) +
          '\n\n' +
          this.i18n.translate('chatbot.ask_service', { lang: language }),
        suggestions: [
          this.i18n.translate('chatbot.tour_info', { lang: language }),
          this.i18n.translate('chatbot.transfer_info', { lang: language }),
          this.i18n.translate('chatbot.vehicle_info', { lang: language }),
          this.i18n.translate('services.flight', { lang: language }),
          this.i18n.translate('chatbot.get_quote', { lang: language }),
        ],
      };
    }

    // Service inquiry
    const serviceType = this.detectServiceType(lowerMessage);
    if (serviceType) {
      const service =
        this.knowledgeBase.services[
          serviceType as keyof typeof this.knowledgeBase.services
        ];
      return {
        message: `${service.description}\n\nüìç Gi√°: ${service.price_range}\n‚ú® T√≠nh nƒÉng: ${service.features.join(', ')}`,
        actions: [
          { type: 'book_service', label: 'ƒê·∫∑t ngay', data: { serviceType } },
          {
            type: 'get_quote',
            label: 'Xem b√°o gi√° chi ti·∫øt',
            data: { serviceType },
          },
        ],
        suggestions: [
          'T√¥i mu·ªën ƒë·∫∑t d·ªãch v·ª• n√†y',
          'Xem c√°c d·ªãch v·ª• kh√°c',
          'B√°o gi√° chi ti·∫øt',
        ],
      };
    }

    // FAQ matching
    const faqMatch = this.findFAQMatch(lowerMessage);
    if (faqMatch) {
      return {
        message: faqMatch.answer,
        actions: faqMatch.actions || [],
        suggestions: ['T√¥i c·∫ßn h·ªó tr·ª£ th√™m', 'Xem d·ªãch v·ª• kh√°c', 'C·∫£m ∆°n'],
      };
    }

    // Location-based suggestions
    const location = this.detectLocation(lowerMessage);
    if (location) {
      return {
        message: `T√¥i t√¨m th·∫•y nhi·ªÅu d·ªãch v·ª• t·∫°i ${location}! B·∫°n quan t√¢m ƒë·∫øn:`,
        actions: [
          {
            type: 'view_details',
            label: `Tour ${location}`,
            data: { location, type: 'tour' },
          },
          {
            type: 'view_details',
            label: `Transfer t·∫°i ${location}`,
            data: { location, type: 'transfer' },
          },
          {
            type: 'view_details',
            label: `Kh√°ch s·∫°n ${location}`,
            data: { location, type: 'hotel' },
          },
        ],
        suggestions: [
          `Tour du l·ªãch ${location}`,
          `Thu√™ xe t·∫°i ${location}`,
          `Kh√°ch s·∫°n ${location}`,
        ],
      };
    }

    // Default response with smart suggestions
    return {
      message:
        'T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªÅ:\n\nüöó D·ªãch v·ª• ƒë∆∞a ƒë√≥n v√† thu√™ xe\nüèñÔ∏è Tour du l·ªãch tr·ªçn g√≥i\n‚úàÔ∏è V√© m√°y bay gi√° t·ªët\nüè® ƒê·∫∑t ph√≤ng kh√°ch s·∫°n\n\nB·∫°n mu·ªën t√¨m hi·ªÉu d·ªãch v·ª• n√†o?',
      suggestions: [
        'D·ªãch v·ª• ƒë∆∞a ƒë√≥n s√¢n bay',
        'Tour du l·ªãch 2-3 ng√†y',
        'Thu√™ xe t·ª± l√°i',
        'V√© m√°y bay gi√° r·∫ª',
        'Kh√°ch s·∫°n 4-5 sao',
      ],
      actions: [
        {
          type: 'contact_support',
          label: 'G·ªçi t∆∞ v·∫•n vi√™n',
          data: { phone: '1900-1234' },
        },
      ],
    };
  }

  private isGreeting(message: string): boolean {
    const greetings = [
      'xin ch√†o',
      'ch√†o',
      'hello',
      'hi',
      'hey',
      'good morning',
      'good afternoon',
    ];
    return greetings.some((greeting) => message.includes(greeting));
  }

  private getRandomGreeting(): string {
    const greetings = this.knowledgeBase.greetings;
    return greetings[Math.floor(Math.random() * greetings.length)];
  }

  private detectServiceType(message: string): string | null {
    const serviceKeywords = {
      transfer: ['ƒë∆∞a ƒë√≥n', 'transfer', 's√¢n bay', 'airport', 'pickup'],
      tour: ['tour', 'du l·ªãch', 'travel', 'trip', 'tham quan'],
      vehicle: ['thu√™ xe', 'rent car', 'rental', 't·ª± l√°i', 'self drive'],
      hotel: ['kh√°ch s·∫°n', 'hotel', 'ph√≤ng', 'room', 'ngh·ªâ'],
      flight: ['m√°y bay', 'flight', 'v√© bay', 'plane', 'airline'],
    };

    for (const [service, keywords] of Object.entries(serviceKeywords)) {
      if (keywords.some((keyword) => message.includes(keyword))) {
        return service;
      }
    }
    return null;
  }

  private findFAQMatch(message: string): any {
    return this.knowledgeBase.faqs.find((faq) =>
      faq.question.some((keyword) => message.includes(keyword)),
    );
  }

  private detectLocation(message: string): string | null {
    const locations = [
      'h√† n·ªôi',
      'hanoi',
      's√†i g√≤n',
      'h·ªì ch√≠ minh',
      'saigon',
      'ƒë√† n·∫µng',
      'da nang',
      'h·∫° long',
      'halong',
      'nha trang',
      'ƒë√† l·∫°t',
      'dalat',
      'ph√∫ qu·ªëc',
      'phu quoc',
      'v≈©ng t√†u',
      'vung tau',
      'h·ªôi an',
      'hoi an',
      'hu·∫ø',
      'hue',
      'sapa',
      'sa pa',
    ];

    for (const location of locations) {
      if (message.includes(location)) {
        return location.charAt(0).toUpperCase() + location.slice(1);
      }
    }
    return null;
  }
}
